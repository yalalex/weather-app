{"version":3,"sources":["components/layout/spinner.gif","components/layout/Navbar.js","components/layout/Alert.js","components/places/Search.js","components/weather/PeriodItem.js","components/weather/DayItem.js","components/layout/Spinner.js","components/weather/Forecast.js","components/places/PlaceItem.js","components/places/Places.js","components/pages/About.js","App.js","index.js"],"names":["module","exports","__webpack_require__","p","Navbar","_ref","units","lang","switchLang","switchUnits","react_default","a","createElement","className","react_router_dom","to","onClick","Alert","alert","concat","type","msg","Search","searchPlaces","clearSearch","setAlert","showClear","history","_useState","useState","_useState2","Object","slicedToArray","text","setText","onSubmit","e","preventDefault","push","name","value","placeholder","onChange","target","PeriodItem","period","offset","dt","main","weather","time","dist_default","locale","unix","format","alt","description","src","icon","style","width","temp","toFixed","DayItem","day","ts","max_temp","min_temp","wind_spd","pop","pres","rh","Spinner","react","spinner","margin","display","Forecast","current","forecastToday","forecast16","getWeather","loading","btn","setBtn","_useState3","_useState4","setTarget","useEffect","switchButton","timezone","sky","wind","pressure","humidity","Date","getTimezoneOffset","length","layout_Spinner","padding","switchTarget","react_router","exact","path","render","props","map","weather_PeriodItem","key","weather_DayItem","PlaceItem","selectPlace","place","setTemp","setSky","_useState5","_useState6","setIcon","getPlaceWeather","_ref2","asyncToGenerator","regenerator_default","mark","_callee","latitude","longitude","res","_res$data","wrap","_context","prev","next","axios","get","process","sent","data","stop","apply","this","arguments","city","regionCode","country","Places","places","places_PlaceItem","id","About","href","App","setUnits","setLang","setLoading","_useState7","_useState8","_useState9","_useState10","setPlaces","_useState11","_useState12","setPlace","_useState13","_useState14","setCurrent","_useState15","_useState16","setForecastToday","_useState17","_useState18","setForecast16","request","query","limit","namePrefix","sort","languageCode","set","then","body","showAlert","catch","err","console","log","_x","setTimeout","_callee2","_context2","_x2","_ref3","_callee4","respo","_respo$data","sys","sunrise","sunset","resp","today","un","_context4","speed","list","slice","_ref4","_callee3","_context3","_x3","layout_Navbar","layout_Alert","places_Search","assign","window","location","pathname","places_Places","weather_Forecast","pages_About","ReactDOM","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.c0925d06.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spinner.706c7930.gif\";","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Navbar = ({ units, lang, switchLang, switchUnits }) => {\r\n  return (\r\n    <nav className='navbar bg-primary'>\r\n      <h1>\r\n        <i className='fas fa-cloud-sun-rain' /> Weather app\r\n      </h1>\r\n      <ul>\r\n        <li>\r\n          <Link to='/weather-app'>{lang === 'en' ? 'Search' : 'Поиск'}</Link>\r\n        </li>\r\n        <li>\r\n          <Link to='/weather-app/about'>\r\n            {lang === 'en' ? 'About' : 'Инфо'}\r\n          </Link>\r\n        </li>\r\n        <li>\r\n          <div className='switch'>\r\n            <div className='select'>\r\n              {units === 'metric' ? '°C' : '°F'}\r\n              <i className='fa fa-angle-down' />\r\n            </div>\r\n            <ul className='select-drop'>\r\n              <li onClick={switchUnits}>{units === 'metric' ? '°F' : '°C'}</li>\r\n            </ul>\r\n          </div>\r\n        </li>\r\n        <li>\r\n          <div className='switch'>\r\n            <div className='select'>\r\n              {lang === 'en' ? 'EN' : 'RU'}\r\n              <i className='fa fa-angle-down' />\r\n            </div>\r\n            <ul className='select-drop'>\r\n              <li onClick={switchLang}>{lang === 'en' ? 'RU' : 'EN'}</li>\r\n            </ul>\r\n          </div>\r\n        </li>\r\n      </ul>\r\n    </nav>\r\n  );\r\n};\r\n\r\nNavbar.propTypes = {\r\n  units: PropTypes.string.isRequired,\r\n  switchUnits: PropTypes.func.isRequired,\r\n  lang: PropTypes.string.isRequired\r\n};\r\n\r\nexport default Navbar;\r\n","import React from 'react';\r\n\r\nconst Alert = ({ alert }) => {\r\n  return (\r\n    alert !== null && (\r\n      <div className={`alert alert-${alert.type} text-center`}>\r\n        <i className='fas fa-info-circle' /> {alert.msg}\r\n      </div>\r\n    )\r\n  );\r\n};\r\n\r\nexport default Alert;\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Search = ({\r\n  searchPlaces,\r\n  clearSearch,\r\n  setAlert,\r\n  showClear,\r\n  lang,\r\n  history\r\n}) => {\r\n  const [text, setText] = useState('');\r\n\r\n  const onSubmit = e => {\r\n    e.preventDefault();\r\n    if (text === '') {\r\n      const alert =\r\n        lang === 'en'\r\n          ? 'Please enter something'\r\n          : 'Пожалуйста, введите что-нибудь';\r\n      setAlert(alert, 'dark');\r\n    } else {\r\n      searchPlaces(text);\r\n      setText('');\r\n      history.push('/weather-app');\r\n    }\r\n  };\r\n\r\n  const onChange = e => setText(e.target.value);\r\n\r\n  return (\r\n    <div>\r\n      <form onSubmit={onSubmit} className='form'>\r\n        <input\r\n          type='text'\r\n          name='text'\r\n          value={text}\r\n          placeholder={\r\n            lang === 'en'\r\n              ? 'Enter City Name...'\r\n              : 'Введите название города на русском языке...'\r\n          }\r\n          onChange={onChange}\r\n        />\r\n        <input\r\n          type='submit'\r\n          value={lang === 'en' ? 'Search' : 'Поиск'}\r\n          className='btn btn-dark btn-block'\r\n        />\r\n      </form>\r\n      {showClear && (\r\n        <button className='btn btn-grey btn-block' onClick={clearSearch}>\r\n          {lang === 'en' ? 'Clear' : 'Очистить'}\r\n        </button>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nSearch.propTypes = {\r\n  searchPlaces: PropTypes.func.isRequired,\r\n  clearSearch: PropTypes.func.isRequired,\r\n  setAlert: PropTypes.func.isRequired,\r\n  showClear: PropTypes.bool.isRequired,\r\n  lang: PropTypes.string.isRequired\r\n};\r\n\r\nexport default Search;\r\n","import React from 'react';\r\nimport Moment from 'react-moment';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst PeriodItem = ({ period, offset, lang }) => {\r\n  const { dt, main, weather } = period,\r\n    time = dt + offset;\r\n  return (\r\n    <div className='card text-center'>\r\n      <ul>\r\n        <li>\r\n          <h3>\r\n            <Moment locale={lang} unix format='ddd LT'>\r\n              {time}\r\n            </Moment>\r\n          </h3>\r\n        </li>\r\n        <li>\r\n          <img\r\n            alt={weather[0].description}\r\n            src={`https://openweathermap.org/img/wn/${weather[0].icon}@2x.png`}\r\n            style={{ width: '100px' }}\r\n          />\r\n        </li>\r\n        <li>\r\n          <h1>{main.temp.toFixed()}°</h1>\r\n        </li>\r\n        {/* <li>Precipitation: {rain}%</li> */}\r\n        {/* <li>\r\n          {lang === 'en' ? 'Humidity: ' : 'Влажность: '}\r\n          {main.humidity}%\r\n        </li>\r\n        <li>\r\n          {lang === 'en' ? 'Wind: ' : 'Ветер: '}\r\n          {wind.speed.toFixed(1)} {lang === 'en' ? 'm/s' : 'м/с'}\r\n        </li>\r\n        <li>\r\n          {lang === 'en' ? 'Pressure: ' : 'Давление: '}\r\n          {main.pressure.toFixed()} {lang === 'en' ? 'mbar' : 'мбар'}\r\n        </li> */}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nPeriodItem.propTypes = {\r\n  period: PropTypes.object.isRequired,\r\n  lang: PropTypes.string.isRequired\r\n};\r\n\r\nexport default PeriodItem;\r\n","import React from 'react';\r\nimport Moment from 'react-moment';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst DayItem = ({ day, lang }) => {\r\n  const { ts, max_temp, min_temp, wind_spd, pop, pres, rh, weather } = day;\r\n  return (\r\n    <div className='card text-center'>\r\n      <ul>\r\n        <li>\r\n          <h3>\r\n            <Moment locale={lang} unix format='ddd Do'>\r\n              {ts}\r\n            </Moment>\r\n          </h3>\r\n        </li>\r\n        <li>\r\n          <img\r\n            alt={weather.description}\r\n            src={`https://www.weatherbit.io/static/img/icons/${\r\n              weather.icon\r\n            }.png`}\r\n            style={{ width: '70px' }}\r\n          />\r\n        </li>\r\n        <li>\r\n          <h2>\r\n            {max_temp.toFixed()}°/{min_temp.toFixed()}°\r\n          </h2>\r\n        </li>\r\n        <li>\r\n          {lang === 'en' ? 'Precipitation: ' : 'Осадки: '}\r\n          {pop}%\r\n        </li>\r\n        <li>\r\n          {lang === 'en' ? 'Humidity: ' : 'Влажность: '}\r\n          {rh}%\r\n        </li>\r\n        <li>\r\n          {lang === 'en' ? 'Wind: ' : 'Ветер: '}\r\n          {wind_spd.toFixed(1)} {lang === 'en' ? 'm/s' : 'м/с'}\r\n        </li>\r\n        <li>\r\n          {lang === 'en' ? 'Pressure: ' : 'Давление: '}\r\n          {pres.toFixed()} {lang === 'en' ? 'mbar' : 'мбар'}\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nDayItem.propTypes = {\r\n  day: PropTypes.object.isRequired,\r\n  lang: PropTypes.string.isRequired\r\n};\r\n\r\nexport default DayItem;\r\n","import React, { Fragment } from 'react';\r\nimport spinner from './spinner.gif';\r\n\r\nconst Spinner = () => (\r\n  <Fragment>\r\n    <img\r\n      src={spinner}\r\n      alt='Loading...'\r\n      style={{ width: '64px', margin: 'auto', display: 'block' }}\r\n    />\r\n  </Fragment>\r\n);\r\n\r\nexport default Spinner;\r\n","import React, { useState, useEffect, Fragment } from 'react';\r\nimport PeriodItem from './PeriodItem';\r\nimport DayItem from './DayItem';\r\nimport Spinner from '../layout/Spinner';\r\nimport PropTypes from 'prop-types';\r\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\r\nimport Moment from 'react-moment';\r\n\r\nconst Forecast = ({\r\n  current,\r\n  forecastToday,\r\n  forecast16,\r\n  getWeather,\r\n  loading,\r\n  units,\r\n  lang\r\n}) => {\r\n  const [btn, setBtn] = useState('');\r\n  const [target, setTarget] = useState('');\r\n\r\n  useEffect(() => {\r\n    if (lang === 'en') {\r\n      setBtn('16-day forecast');\r\n      setTarget('16-day');\r\n    } else {\r\n      setBtn('Прогноз на 16 дней');\r\n      setTarget('16-day');\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    switchButton();\r\n  }, [lang, target]);\r\n\r\n  useEffect(() => {\r\n    getWeather();\r\n  }, [units]);\r\n\r\n  const switchTarget = target => {\r\n    if (target === '16-day') {\r\n      setTarget('current');\r\n    } else {\r\n      setTarget('16-day');\r\n    }\r\n  };\r\n\r\n  const switchButton = () => {\r\n    target === '16-day'\r\n      ? lang === 'en'\r\n        ? setBtn('16-day forecast')\r\n        : setBtn('Прогноз на 16 дней')\r\n      : lang === 'en'\r\n      ? setBtn('30-hr forecast')\r\n      : setBtn('Прогноз на 30 часов');\r\n  };\r\n\r\n  const {\r\n      name,\r\n      timezone,\r\n      dt,\r\n      weather,\r\n      sky,\r\n      wind,\r\n      temp,\r\n      pressure,\r\n      humidity,\r\n      icon\r\n    } = current,\r\n    offset = new Date().getTimezoneOffset() * 60 + timezone,\r\n    time = dt + offset;\r\n  if (forecastToday.length === 0) return null;\r\n  else if (loading) {\r\n    return <Spinner />;\r\n  } else\r\n    return (\r\n      <Router>\r\n        <Fragment>\r\n          <div className='card grid-2'>\r\n            <div className='card grid-2' style={{ padding: '0' }}>\r\n              <div className='all-center'>\r\n                <img\r\n                  alt={sky}\r\n                  src={`https://openweathermap.org/img/wn/${icon}@2x.png`}\r\n                  style={{ width: '150px' }}\r\n                />\r\n              </div>\r\n              <div style={{ margin: 'auto 0' }}>\r\n                <h1>{temp}°</h1>\r\n                <h2>{name}</h2>\r\n                <h3>\r\n                  <Moment locale={lang} unix format='LT'>\r\n                    {time}\r\n                  </Moment>\r\n                </h3>\r\n              </div>\r\n            </div>\r\n            <div style={{ padding: '0.7rem 0' }}>\r\n              <ul>\r\n                <li>\r\n                  <h3>{lang === 'en' ? weather : 'Текущие условия:'}</h3>\r\n                </li>\r\n                <li>\r\n                  {lang === 'en' ? 'Humidity: ' : 'Влажность: '}\r\n                  {humidity}%\r\n                </li>\r\n                <li>\r\n                  {lang === 'en' ? 'Wind: ' : 'Ветер: '}\r\n                  {wind.toFixed(1)} {lang === 'en' ? 'm/s' : 'м/с'}\r\n                </li>\r\n                <li>\r\n                  {lang === 'en' ? 'Pressure: ' : 'Давление: '}\r\n                  {pressure.toFixed()} {lang === 'en' ? 'mbar' : 'мбар'}\r\n                </li>\r\n              </ul>\r\n              <Link\r\n                to={`/weather-app/${target}/${name}`}\r\n                className='btn btn-dark btn-sm my-1'\r\n                onClick={() => switchTarget(target)}\r\n              >\r\n                {btn}\r\n              </Link>\r\n            </div>\r\n          </div>\r\n          <Switch>\r\n            <Route\r\n              exact\r\n              path='/weather-app/current/:name'\r\n              render={props => (\r\n                <div className='grid-5'>\r\n                  {forecastToday.map(period => (\r\n                    <PeriodItem\r\n                      key={period.dt}\r\n                      period={period}\r\n                      offset={offset}\r\n                      lang={lang}\r\n                    />\r\n                  ))}\r\n                </div>\r\n              )}\r\n            />\r\n            <Route\r\n              exact\r\n              path='/weather-app/16-day/:name'\r\n              render={props => (\r\n                <div className='grid-4'>\r\n                  {forecast16.map(day => (\r\n                    <DayItem key={day.ts} day={day} lang={lang} />\r\n                  ))}\r\n                </div>\r\n              )}\r\n            />\r\n          </Switch>\r\n        </Fragment>\r\n      </Router>\r\n    );\r\n};\r\n\r\nForecast.propTypes = {\r\n  forecastToday: PropTypes.array.isRequired,\r\n  forecast16: PropTypes.array.isRequired,\r\n  current: PropTypes.object.isRequired,\r\n  loading: PropTypes.bool.isRequired,\r\n  lang: PropTypes.string.isRequired,\r\n  units: PropTypes.string.isRequired,\r\n  getWeather: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Forecast;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst PlaceItem = ({ selectPlace, place, lang, units }) => {\r\n  const [temp, setTemp] = useState('');\r\n  const [sky, setSky] = useState('');\r\n  const [icon, setIcon] = useState('');\r\n\r\n  useEffect(() => {\r\n    getPlaceWeather();\r\n  }, [units]);\r\n\r\n  const getPlaceWeather = async () => {\r\n    const { latitude, longitude } = place;\r\n    const res = await axios.get(\r\n      `https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&units=${units}&APPID=${\r\n        process.env.REACT_APP_OPENWEATHER_KEY\r\n      }`\r\n    );\r\n    const { main, weather } = res.data;\r\n    setTemp(main.temp.toFixed());\r\n    setSky(weather[0].description);\r\n    setIcon(weather[0].icon);\r\n  };\r\n\r\n  const { city, regionCode, country } = place;\r\n  return (\r\n    <div className='card text-center'>\r\n      <h1>{temp}°</h1>\r\n      <img\r\n        alt={sky}\r\n        src={`https://openweathermap.org/img/wn/${icon}@2x.png`}\r\n        style={{ width: '100px' }}\r\n      />\r\n      <h3>\r\n        {city}, {regionCode}\r\n      </h3>\r\n      <h4>{country}</h4>\r\n      <div>\r\n        <Link\r\n          to={`/weather-app/current/${city}`}\r\n          className='btn btn-dark btn-sm my-1'\r\n          onClick={() => selectPlace(place)}\r\n        >\r\n          {lang === 'en' ? 'Select' : 'Выбрать'}\r\n        </Link>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nPlaceItem.propTypes = {\r\n  place: PropTypes.object.isRequired,\r\n  selectPlace: PropTypes.func.isRequired,\r\n  lang: PropTypes.string.isRequired,\r\n  units: PropTypes.string.isRequired\r\n};\r\n\r\nexport default PlaceItem;\r\n","import React from 'react';\r\nimport PlaceItem from './PlaceItem';\r\nimport Spinner from '../layout/Spinner';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Places = ({ places, selectPlace, loading, lang, units }) => {\r\n  if (loading) {\r\n    return <Spinner />;\r\n  } else\r\n    return (\r\n      <div className='grid-4'>\r\n        {places.map(place => (\r\n          <PlaceItem\r\n            key={place.id}\r\n            place={place}\r\n            selectPlace={selectPlace}\r\n            units={units}\r\n            lang={lang}\r\n          />\r\n        ))}\r\n      </div>\r\n    );\r\n};\r\n\r\nPlaces.propTypes = {\r\n  places: PropTypes.array.isRequired,\r\n  loading: PropTypes.bool.isRequired,\r\n  lang: PropTypes.string.isRequired,\r\n  units: PropTypes.string.isRequired,\r\n  selectPlace: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Places;\r\n","import React, { Fragment } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst About = ({ lang }) => {\r\n  return lang === 'en' ? (\r\n    <Fragment>\r\n      <h2>About this app</h2>\r\n      <p>\r\n        An application for finding weather in more than 134,000 cities in the\r\n        world.\r\n      </p>\r\n      <p>\r\n        Provides information on current weather, as well as a detailed forecast\r\n        for the next 30 hours and a forecast for 16 days.\r\n      </p>\r\n      <p>\r\n        Made by <a href='https://github.com/yalalex/'>Alex Y</a>.\r\n      </p>\r\n    </Fragment>\r\n  ) : (\r\n    <Fragment>\r\n      <h2>О приложении</h2>\r\n      <p>Приложение для поиска погоды в более чем 134 000 городах мира.</p>\r\n      <p>\r\n        Предоставляет информацию по текущей погоде, а так же подробный прогноз\r\n        на ближайшие 30 часов и прогноз на 16 дней.\r\n      </p>\r\n      <p>\r\n        Сделал <a href='https://github.com/yalalex/'>Alex Y</a>.\r\n      </p>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nAbout.propTypes = {\r\n  lang: PropTypes.string.isRequired\r\n};\r\n\r\nexport default About;\r\n","import React, { useState } from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport Navbar from './components/layout/Navbar';\nimport Alert from './components/layout/Alert';\nimport Search from './components/places/Search';\nimport Forecast from './components/weather/Forecast';\nimport Places from './components/places/Places';\nimport About from './components/pages/About';\nimport './App.css';\nimport request from 'superagent';\nimport axios from 'axios';\n\nconst App = () => {\n  const [units, setUnits] = useState('metric');\n  const [lang, setLang] = useState('en');\n  const [loading, setLoading] = useState(false);\n  const [alert, setAlert] = useState(null);\n  const [places, setPlaces] = useState([]);\n  const [place, setPlace] = useState(null);\n  const [current, setCurrent] = useState({});\n  const [forecastToday, setForecastToday] = useState([]);\n  const [forecast16, setForecast16] = useState([]);\n\n  // useEffect(() => {\n  //   getWeather();\n  // }, place);\n\n  //Search places to get weather for\n  const searchPlaces = async text => {\n    setLoading(true);\n    request\n      .get('https://wft-geo-db.p.rapidapi.com/v1/geo/cities')\n      .query({ limit: '10' })\n      .query({ namePrefix: text })\n      .query({ sort: '-population' })\n      .query({ languageCode: lang })\n      .set('x-rapidapi-host', 'wft-geo-db.p.rapidapi.com')\n      .set('x-rapidapi-key', process.env.REACT_APP_RAPIDAPI_KEY)\n      .set('Accept', 'application/json')\n      .then(res => {\n        if (res.body.data.length === 0) {\n          const alert =\n            lang === 'en'\n              ? 'No cities found. Check the spelling and try again'\n              : 'Ничего не найдено. Проверьте правильность написания и попробуйте снова';\n          showAlert(alert, 'dark');\n          setLoading(false);\n        } else {\n          setPlaces(res.body.data);\n          setLoading(false);\n        }\n        // console.log(places);\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  //Clear search\n  const clearSearch = () => {\n    setPlaces([]);\n    setLoading(false);\n  };\n\n  //Set alert\n  const showAlert = (msg, type) => {\n    setAlert({ msg, type });\n    setTimeout(() => setAlert(null), 3000);\n  };\n\n  //Select place in search and get weather for it\n  const selectPlace = async place => {\n    const { city, latitude, longitude } = place;\n    setPlace(\n      () => {\n        return { city, latitude, longitude };\n      },\n      () => getWeather()\n    );\n  };\n\n  //Get current weather and 30-hr/16-day forecast\n  const getWeather = async () => {\n    setLoading(true);\n    const { city, latitude, longitude } = place;\n    //Get current weather\n    const respo = await axios.get(\n      `https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&units=${units}&APPID=${\n        process.env.REACT_APP_OPENWEATHER_KEY\n      }`\n    );\n    const { timezone, dt, main, wind, weather, sys } = respo.data,\n      { temp, pressure, humidity } = main,\n      { sunrise, sunset } = sys;\n    setCurrent({\n      name: city,\n      timezone,\n      dt,\n      temp: temp.toFixed(),\n      wind: wind.speed,\n      pressure,\n      humidity,\n      weather: weather[0].main,\n      sky: weather[0].description,\n      icon: weather[0].icon,\n      sunrise,\n      sunset\n    });\n    //Get forecast for 30 hours\n    const resp = await axios.get(\n      `https://api.openweathermap.org/data/2.5/forecast?lat=${latitude}&lon=${longitude}&units=${units}&APPID=${\n        process.env.REACT_APP_OPENWEATHER_KEY\n      }`\n    );\n    const today = resp.data.list.slice(0, 10);\n    today.map(async period => {\n      //Change icons according to local time\n      if (sunrise + 86400 < period.dt && period.dt < sunset + 86400) {\n        period.weather[0].icon = period.weather[0].icon.slice(0, -1) + 'd';\n      } else if (sunset < period.dt && period.dt < sunrise + 86400) {\n        period.weather[0].icon = period.weather[0].icon.slice(0, -1) + 'n';\n      } else if (sunrise < period.dt && period.dt < sunset) {\n        period.weather[0].icon = period.weather[0].icon.slice(0, -1) + 'd';\n      } else if (sunset - 86400 < period.dt && period.dt < sunrise) {\n        period.weather[0].icon = period.weather[0].icon.slice(0, -1) + 'n';\n      }\n    });\n    setForecastToday(today);\n    //Get forecast for 16 days\n    const un = units === 'metric' ? 'M' : 'I';\n    const res = await axios.get(\n      `https://api.weatherbit.io/v2.0/forecast/daily?lat=${latitude}&lon=${longitude}&units=${un}&key=${\n        process.env.REACT_APP_WEATHERBIT_KEY\n      }`\n    );\n    setForecast16(res.data.data);\n    setLoading(false);\n    // console.log(forecastToday);\n    // console.log(forecast16);\n    // console.log(current);\n    // console.log(place);\n  };\n\n  //Switch language\n  const switchLang = () => {\n    lang === 'en' ? setLang('ru') : setLang('en');\n  };\n\n  // Switch units\n  const switchUnits = () => {\n    units === 'metric' ? setUnits('imperial') : setUnits('metric');\n  };\n\n  return (\n    <Router>\n      <div className='App'>\n        <Navbar\n          switchUnits={switchUnits}\n          switchLang={switchLang}\n          units={units}\n          lang={lang}\n        />\n        <div className='container'>\n          <Alert alert={alert} lang={lang} />\n          <Route\n            path='/weather-app'\n            render={props => (\n              <Search\n                {...props}\n                searchPlaces={searchPlaces}\n                clearSearch={clearSearch}\n                showClear={\n                  places.length > 0 &&\n                  window.location.pathname === '/weather-app'\n                    ? true\n                    : false\n                }\n                setAlert={showAlert}\n                lang={lang}\n              />\n            )}\n          />\n          <Switch>\n            <Route\n              exact\n              path='/weather-app'\n              render={props => (\n                <Places\n                  selectPlace={selectPlace}\n                  units={units}\n                  places={places}\n                  loading={loading}\n                  lang={lang}\n                />\n              )}\n            />\n            <Route\n              exact\n              path='/weather-app/current/:name'\n              render={props => (\n                <Forecast\n                  {...props}\n                  getWeather={getWeather}\n                  current={current}\n                  forecastToday={forecastToday}\n                  forecast16={forecast16}\n                  loading={loading}\n                  lang={lang}\n                  units={units}\n                />\n              )}\n            />\n            <Route\n              exact\n              path='/weather-app/about'\n              render={props => <About lang={lang} />}\n            />\n          </Switch>\n        </div>\n      </div>\n    </Router>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'moment/locale/ru';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}